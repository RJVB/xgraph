#!/bin/sh
# file with machine specific definitions for gccopt, etc.
# expected in ${DEVPREFSDIR}/wmachine or ${HOME}/.Preferences/.dev/wmachine
# source with the command name doing the sourcing as its first argument

echo "$0 $*" 1>&2

case $1 in
	gccopt)

		case $HOST in
			scenelink4|SceneLink4)
				DEFAULT_CC="/usr/local/bin/gcc-4.0.2"
				DEFAULT_CXX="/usr/local/bin/g++-4.0.2"
				ULOCAL_INCLUDE=0
				CPU="pentium-m"
				ALT_CPU="pentium3"
				INLINING="-finline-functions"
				GCC3_CPU_OPTS="-mmmx -msse -msse2 -mfpmath=sse,387 -maccumulate-outgoing-args"

				VOPTIMOPT="-O3 -f{s-r,nc-r,n-m,n-a,i-f,k-i-f,d-b}"
				OOPTIMOPT="-O3 -fstrength-reduce" #-fdelayed-branch"	# -mshared-libs"
# The options that get turned on by maximal optimisation (default):
				OOPTIMOPT="$OOPTIMOPT  -fexpensive-optimizations -frerun-cse-after-loop -fno-schedule-insns -fno-schedule-insns2 -funroll-loops -fno-unroll-all-loops -ftracer -ftree-vectorize"
# The options that are standard on, but get turned off by debugging, regardless of whether optimisation is turned on again:
				NODEBUGOPT="" #"-fomit-frame-pointer"
				OPTIMOPT=""
				DEBUGOPT="$NODEBUGOPT"
# Options to ensure that only "safe" optimisations are performed, e.g. not causing misalignement of variables, etc.
# On a PIII, this means never allowing -fcaller-saves, unless user overrides it again...
				SAFETYOPTS="-fno-caller-saves -fno-force-mem"

				STRIP=""
				;;
			bola)
				DEFAULT_CC="/usr/local/bin/gcc33.2"
				DEFAULT_CXX="/usr/local/bin/g++33.2"
				ULOCAL_INCLUDE=0
				CPU="pentium3"
				ALT_CPU="pentiumpro"
				INLINING="-finline-functions"
# 			 # on gcc 3.2.2, mmx/sse auto code generation is unreliable (with the other flags we use??)
				GCC3_CPU_OPTS="-mno-mmx -mno-sse -mfpmath=387 -maccumulate-outgoing-args"

				VOPTIMOPT="-O3 -f{s-r,nc-r,n-m,n-a,i-f,k-i-f,d-b}"
				OOPTIMOPT="-O3 -fstrength-reduce" #-fdelayed-branch"	# -mshared-libs"
# The options that get turned on by maximal optimisation (default):
				OOPTIMOPT="$OOPTIMOPT  -fexpensive-optimizations -frerun-cse-after-loop -fno-schedule-insns -fno-schedule-insns2 -funroll-loops -fno-unroll-all-loops"
# The options that are standard on, but get turned off by debugging, regardless of whether optimisation is turned on again:
				NODEBUGOPT="" #"-fomit-frame-pointer"
				OPTIMOPT=""
				DEBUGOPT="$NODEBUGOPT"
# Options to ensure that only "safe" optimisations are performed, e.g. not causing misalignement of variables, etc.
# On a PIII, this means never allowing -fcaller-saves, unless user overrides it again...
				SAFETYOPTS="-fno-caller-saves -fno-force-mem"

				STRIP=""
				;;
			obsolete|*)
				DEFAULT_CC="/usr/bin/gcc"
				DEFAULT_CXX="/usr/bin/g++"
				ULOCAL_INCLUDE=0
				CPU="pentiumpro"
				ALT_CPU="pentiumpro"
				INLINING="-finline-functions"
				GCC3_CPU_OPTS="-mno-mmx -mno-sse -mfpmath=387 -maccumulate-outgoing-args"

				VOPTIMOPT="-O3 -f{s-r,nc-r,n-m,n-a,i-f,k-i-f,d-b}"
				OOPTIMOPT="-O3 -fstrength-reduce" #-fdelayed-branch"	# -mshared-libs"
# The options that get turned on by maximal optimisation (default):
				OOPTIMOPT="$OOPTIMOPT  -fexpensive-optimizations -frerun-cse-after-loop -fno-schedule-insns -fno-schedule-insns2 -funroll-loops -fno-unroll-all-loops"
# The options that are standard on, but get turned off by debugging, regardless of whether optimisation is turned on again:
				NODEBUGOPT="" #"-fomit-frame-pointer"
				OPTIMOPT=""
				DEBUGOPT="$NODEBUGOPT"
# Options to ensure that only "safe" optimisations are performed, e.g. not causing misalignement of variables, etc.
# On a PIII, this means never allowing -fcaller-saves, unless user overrides it again...
				SAFETYOPTS="-fno-caller-saves -fno-force-mem"

				STRIP=""
				;;
		esac
		;;
	*)
		echo "$0: PROBLEM: we should never be called with unknown argument >$1<"
		;;
esac
