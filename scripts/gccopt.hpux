#!/bin/sh
# gccopt script interface to gcc 2.4.3 on HPUX

VOPTIMOPT="-O3 -f{s-r,nc-r,n-m,n-a,i-f,k-i-f,d-b}"
# OOPTIMOPT="-O3 -fstrength-reduce -finline-functions -fdelayed-branch"	# -mshared-libs"
# echo "\t-finline-functions turned off"
OOPTIMOPT="-O3 -fstrength-reduce -fdelayed-branch"	# -mshared-libs"
# 970113:
OOPTIMOPT="$OOPTIMOPT -finline-functions  -fschedule-insns -fexpensive-optimizations -frerun-cse-after-loop"
OPTIMOPT="$OOPTIMOPT"
OTHEROPTIMS=""
LOCALINC="-I/users/bertin/work/include -I/users/bertin/work/include"
SYS=
A=""
PIPE="-pipe"
OTHEROPT="$LOCALINC -I/users/bertin/work/include -I/usr/include/X11R4 -I/usr/include/X11R4/X11 -I/usr/local/include -I/usr/local/include/X11"
WARNINGS="-Wcomment -Wunused -Winline"	# -Wcast-align
EXTRA_WARNINGS="-W -Wuninitialized -Wconversion -Wredundant-decls -Wpointer-arith -Wformat -Wshadow"
ALL_WARNINGS="-Wall -Wtraditional -Wshadow -Wpointer-arith -Wcast-qual  -Wcast-align -Wconversion -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wredundant-decls -Wnested-externs -Wenum-clash -Woverloaded-virtual -Winline"
PROTO="-D__STDC__ -D_PROTOTYPES"
DEFINES="-D__GCCOPT__ -D_IEEE -D_HPUX_SOURCE -D_SYS5_SOURCE"
LIBDIR="-L. -L /usr/lib/X11R4 -L /usr/local/lib"
if [ "$Compile" = "" ] ;then
	Compile="gcc -fwritable-strings -mkernel -fverbose-asm"
fi

LINK=1
LIBS=""

ARGS="$ENVARGS"
VERBOSE=""
DEBUG=0

COMPRESS="" ; export COMPRESS
UNCOMPRESS="" ; export UNCOMPRESS
COMPRESSING=0

compress="gzip -9"
uncompress="gunzip"
Z="gz"

if [ "$COMMANDLINE" = "0" ] ;then
	SWITCHES=""
else
	SWITCHES="$Compile"
fi

if [ "$SLEEP" = "" ] ;then
	SLEEP=0
fi

# if [ "${SRCDIR}" = "" ] ;then
# 	SRCDIR="."
# fi

SELF="$0 $*"
TARGET=""

TIME=""

while [ $# != 0 ] ; do
	case $1 in
		"-debug")
			echo "$SELF"
			set -x
			DEBUG=1 ; export DEBUG
			;;
		"-srcdir")
			 # hardcode the full pathname in the objectfile. This
			 # is useful for debugging: the debugger will always (?)
			 # find the sourcefile
			SRCDIR="`pwd`/"
			;;
		"-more_warnings")
			WARNINGS="${WARNINGS} ${EXTRA_WARNINGS}"
			echo "gcc warnings: ${WARNINGS}"
			EXTRA_WARNINGS=""
			;;
		"-all_warnings")
			WARNINGS="${ALL_WARNINGS}"
			echo "gcc warnings: ${WARNINGS}"
			;;
		"-inline")
			OPTIMOPT="${OPTIMOPT} -finline-functions"
			INLINE="-fkeep-inline-functions"
			;;
		"-noinline")
			OPTIMOPT="${OPTIMOPT} -fno-inline-functions"
			INLINE=""
			;;
		"-Ac")
			ARGS="$ARGS -traditional"
			PROTO="-U__STDC__ -U_PROTOTYPES"
			if [ "$SWITCHES" != "" ] ;then
				SWITCHES="${SWITCHES} -traditional"
			fi
			;;
		"-Aa")
			ARGS="$ARGS -ansi"
			PROTO="-D__STDC__ -D_PROTOTYPES"
			if [ "$SWITCHES" != "" ] ;then
				SWITCHES="${SWITCHES} -ansi"
			fi
			;;
		"-sleep")
			SLEEP=$2
			shift
			;;
		"-Zbg")
			COMPRESSING=2
			;;
		"-Z")
			COMPRESSING=1
			;;
		"-v")
			VERBOSE="-v"
			OTHEROPT="-Q $OTHEROPT"
			ARGS="$ARGS $1"
			;;
		"-Q")
			ARGS="$ARGS $1"
			TIME="time"
			;;
		"$LOCALINC")
			echo "$0: $LOCALINC already included in headerfile searchtree"
			;;
		"-c"|"-fsyntax-only"|"-syntax")
			if [ "$1" = "-syntax" ] ;then
				one="-fsyntax-only"
			else
				one="$1"
			fi
			LINK=0
			ARGS="$ARGS $one ${SRCDIR}$2"
			if [ "$SWITCHES" != "" ] ;then
				SWITCHES="${SWITCHES} $one ${SRCDIR}$2"
			fi
			LIBDIR=""
			file="`echo $2 | sed -e 's/\.[csi]//g'`"
			file="${SRCDIR}${file}"
			if [ -r "$file".c ] ;then
				OUTPUT=$2	#$file
				if [ "${TARGET}" != "" ] ;then
					object="${TARGET}"
				else
					object="$file".o
				fi
				if [ -r "$object".$Z ] ;then
					UNCOMPRESS="$UNCOMPRESS ${object}.$Z"
				fi
# 				if [ ! -r $object -a $COMPRESSING != 0 ] ;then
				if [ $COMPRESSING != 0 ] ;then
					COMPRESS="$COMPRESS $object"
				fi
			else
				echo "Warning: file ${file}.c doesn't exist - non-filename after -c ?"
# 				COMPRESS="$COMPRESS ${file}.o"
			fi
			shift
			;;
		"-o")
			TARGET="${SRCDIR}$2"
			OUTPUT=$2	#"`basename $2`"
			ARGS="$ARGS $1 $2"
			if [ "$SWITCHES" != "" ] ;then
				SWITCHES="${SWITCHES} $1 ${SRCDIR}$2"
			fi
			if [ $LINK = 0 ] ;then
				echo "\"$1 $2\" was preceded by \"-c $file.c\": reverse for correct handling of compressed object-files!\n\
\telse you run the risk of favouring the old object-file"
			fi
			shift
			;;
		"-ZP")
			;;
		"-ZB"|"-BSD")
#			SYS="-A runtype,bsd4.3 -A systype,bsd4.3"
			SYS=$SYS
			LIBS="$LIBS -lBSD"
			;;
		"-ZS"|"-SYSV")
#			SYS="-A runtype,sys5.3 -A systype,sys5.3"
			SYS=$SYS
			;;
		"-Opt")
			OPTIMOPT="$OOPTIMOPT"
			DEBUGOPT=""
			ENDO=""
			echo "\"full\" optimisation => no DEBUG"
			;;
		"-noOpt")
			OPTIMOPT="-O0"
			VOPTIMOPT=""
			;;
		"-simOpt")
			OPTIMOPT="-O"
			VOPTIMOPT="-O"
			;;
		"-gp")
# 			echo "Debug && Profiling => no Optim"
			OPTIMOPT=""
			DEBUGOPT="-g -p -DDEBUG -DPROFILING"
# 			ENDO="/usr/lib/end.o"
			;;
		-g*|-9*)
# 			ARGS="$ARGS $1 -DDEBUG"
			if [ "$OPTIMOPT" != "" ] ;then
				echo "DEBUG => no \"simple\" optimisation (-simOpt)"
				OPTIMOPT=""
				VOPTIMOPT=""
			else
				echo "DEBUG and no optimisation (-noOpt)"
			fi
			OTHEROPTIMS="${OTHEROPTIMS} ${INLINE}"
			DEBUGOPT="-g3 -DDEBUG"
			 # debugging: hardcode full sourcefile path.
			 # supposes we're compiling where the file stands...
			SRCDIR="`pwd`/"
# 			ENDO="/usr/lib/end.o"
			;;
		-pg|-p)
# 			echo "Profiling => no Optim"
# 			OPTIMOPT=""
			DEBUGOPT="${DEBUGOPT} $1 -DPROFILING"
			;;
		"-SERIAL")
			PIPE=""
			;;
		*.o)
			object=$1
			if [ "$object" = "/usr/lib/end.o" ] ;then
				ENDO=""
			fi
# 			if [ ! -s $object ] ;then
# 				rm -f "$object"
# 			fi
			if [ -r "$object".$Z ] ;then
				UNCOMPRESS="$UNCOMPRESS ${object}.$Z"
			fi
# 			if [ ! -r $object -a $COMPRESSING != 0 ] ;then
			if [ $COMPRESSING != 0 ] ;then
				COMPRESS="$COMPRESS $object"
			fi
			ARGS="$ARGS $1"
			;;
		-L*|-l*)
			LIBS="$LIBS $1"
			ARGS="$ARGS $1"
			;;
		-*)
			ARGS="$ARGS $1"
			if [ "$SWITCHES" != "" ] ;then
				SWITCHES="${SWITCHES} `echo $1 | sed -e 's/\\\"/\\\\\"/g'`"
			fi
			;;
		*)
			if [ -r "$1" ] ;then
				ARGS="$ARGS ${SRCDIR}$1"
			else
				ARGS="$ARGS $1"
			fi
# 			SWITCHES="${SWITCHES} $1"
			if [ "$SWITCHES" != "" ] ;then
				SWITCHES="${SWITCHES} `echo $1 | sed -e 's/\\\"/\\\\\"/g'`"
			fi
			;;
	esac
	shift 1
done

if [ $DEBUG != 1 ] ;then
	set +x
fi

OPTIMOPT="${OPTIMOPT} ${OTHEROPTIMS}"

if [ "$SWITCHES" != "" ] ;then
	SWITCHES="${SWITCHES} ${SYS} ${OPTIMOPT} ${DEBUGOPT}"
fi

if [ $LINK = 0 ] ;then
	LIBS=""
	ENDO=""
fi

if [ "$USE_INCREMENT_RETURN" = "1" ] ;then
	INCREMENT_RETURN="`cxgetenv INCREMENT_RETURN`"
	if [ "$INCREMENT_RETURN" = "" ] ;then
		INCREMENT_RETURN=0
	fi
fi

rm -f .make_success

if [ "$UNCOMPRESS" != "" ] ;then
#  	echo "\tuncompressing $UNCOMPRESS"
 	/bin/echo -n "\tuncompressing "
	for J in $UNCOMPRESS ;do
# 		rm -f "`basename $J .$Z`"
		( 
			cd `dirname $J` ;\
			UNC_OBJ="`basename $J .$Z`" ;\
			OLD_UNC_OBJ="`basename $J .$Z`.old" ;\
			mv $UNC_OBJ $OLD_UNC_OBJ ;\
			/bin/echo -n "$J"
			$uncompress $VERBOSE `basename $J` ;\
			/bin/echo -n "; "
			touch -r $OLD_UNC_OBJ $UNC_OBJ ;\
			rm -f $OLD_UNC_OBJ )
	done
	echo "done"
fi

if [ "$VERBOSE" != "" ] ; then
	set -x
fi

EMSGb="./emsg/$OUTPUT"
EMSG="${EMSGb}.msg"
if [ ! -d ./emsg -a "$EMSGMAKE" !=  "" ] ;then
	echo "$0: creating `pwd`/emsg"
	mkdir ./emsg
fi
if [ -d ./emsg -a "$OUTPUT" != "" -a -d "`dirname ${EMSG}`" ] ;then
	echo "\tOutput saved in ${EMSG}"
	rm -f ${EMSGb}*
else
	EMSGb=""
	EMSG="/dev/null"
fi
if [ "$SRCDIR" != "" ] ;then
	echo "Compiling in directory \"$SRCDIR\""
fi

( $TIME $Compile -DSWITCHES="\"${SWITCHES}\"" $A $SYS $OTHEROPT $OPTIMOPT $DEBUGOPT $WARNINGS $PROTO $DEFINES $LIBDIR $ARGS  $ENDO $LIBS 2>&1 ; cxsetenv RET $? )\
					| tee $EMSG
RET="`cxgetenv RET`" ; export RET

if [ $DEBUG != 1 ] ;then
	set +x
fi

if [ "$RET" != "0" ] ;then
	echo "Return code $RET" >> $EMSG
	if [ "$EMSGb" != "" -a "$RET" != "0" ] ;then
		echo "Messages in ${EMSGb}.err"
		mv "$EMSG" "${EMSGb}.err"
	fi
fi

if [ "${OUTPUT}" != "" -a "${LINK}" = 1 ] ;then
	ll ${OUTPUT}*
# 	what ${OUTPUT}
fi

if [ "$COMPRESS" != "" ] ;then
	echo "\tcompressing $COMPRESS"
	if [ $LINK = 0 ] ;then
		TOUCH=""
		if [ $COMPRESSING = 2 ] ;then
			COMPRESSING=1
		fi
	else	
		TOUCH="$TARGET"
	fi
	export TOUCH
	case $COMPRESSING in
		0)
			;;
		1)
			if [ $LINK != 0 ] ;then
				_obj_compress 0 $compress $VERBOSE $Z $TARGET $COMPRESS
			else
				_obj_compress 0 $compress $VERBOSE $Z "" $COMPRESS
			fi
# 			for J in $COMPRESS ;do
# 				if [ -r $J ] ;then
# 					rm -f $J.$Z
# 					nice $compress $VERBOSE $J
# 					echo "\c" > $J
# 					touch -r $J.$Z $J
# 				fi
# 			done
# 			if [ $LINK != 0 ] ;then
# 				(sleep 1 ; touch $TARGET) &
# 			fi
# 			echo "\tcompressing done"
			;;
		2)
			if [ $LINK != 0 ] ;then
				( system "_obj_compress </dev/null 1 $compress $VERBOSE $Z $TARGET $COMPRESS &" ) &
			else
				( system "_obj_compress </dev/null 0 $compress $VERBOSE $Z \"\" $COMPRESS &" ) &
			fi
# 			( for J in $COMPRESS ;do if [ -r $COMPRESS ] ;then \
# 					rm -f $J.$Z ;\
# 					nice $compress $VERBOSE $J ;\
# 					echo "\c" > $J ;\
# 					touch -r $J.$Z $J ;\
# 				fi ;\
# 			done ;\
# 			if [ $LINK != 0 ] ;then sleep 1 ; touch $TARGET ;fi ) &
			;;
		*)
			echo "Illegal value ($COMPRESSING) for COMPRESSING"
			;;
	esac
fi

if [ "$USE_INCREMENT_RETURN" = "1" ] ;then
	INCREMENT_RETURN=`echo "$INCREMENT_RETURN + $RET" | bc`
	cxsetenv INCREMENT_RETURN $INCREMENT_RETURN
else
	INCREMENT_RETURN=$RET
fi

if [ $INCREMENT_RETURN = 0 ] ;then
	touch .make_success
else
	echo "(Incremental) exitcode $INCREMENT_RETURN" 1>&2
fi

if [ $SLEEP != 0 ] ;then
	sleep $SLEEP
fi

exit $RET

# #!/bin/sh
# # _obj_compress $background $compress $VERBOSE $Z $TARGET $COMPRESS
# 
# background=$1 ; export background ; shift
# compress=$1 ; export compress ; shift
# VERBOSE=$1 ; export VERBOSE ; shift
# Z=$1 ; export Z ; shift
# TARGET=$1 ; export TARGET ; shift
# COMPRESS=$* ; export COMPRESS
# 
# do_compress(){
# 	for J in $COMPRESS ;do
# 		if [ -r $J ] ;then 
# 			rm -f $J.$Z
# 			nice $compress $VERBOSE $J
# 			echo "\c" > $J
# 			touch -r $J.$Z $J
# 		fi
# 	done
# 
# 	if [ "$TARGET" != "" ] ;then
# 		sleep 1
# 		touch $TARGET 
# 		echo "$0: $TARGET touched and done"
# 	fi
# }
# 
# if [ $background != 0 ] ;then	
# 	( do_compress < /dev/null > /dev/null 2>&1 & ) &
# 	echo "$0: background"
# else
# 	do_compress
# fi
# exit 0

# #!/bin/sh
# # cxgetenv <varname>
# 
# if [ $# = 0 ] ;then
# 	exec Env
# else
# 	if [ $# -gt 1 ] ;then
# 		echo "usage: `basename $0` <variablename> <value>" 1>&2
# 		echo "The variable is recorded in \$ENVDIR , ./.env or $HOME/.env" 1>&2
# 		exit 1
# 	fi
# fi
# if [ "$ENVDIR" = "" ] ;then
# 	if [ -d ./.env ] ;then
# 		ENVDIR="./.env"
# 	else	
# 		if [ -d $HOME/.env ] ;then
# 			ENVDIR="$HOME/.env"
# 		else
# 			echo "No ENVDIR specified - creating ./.env" 1>&2
# 			mkdir ./.env
# 			ENVDIR="./.env"
# 		fi
# 	fi
# fi
# 
# if [ ! -d "$ENVDIR" ] ;then
# 	echo "ENVDIR=$ENVDIR : not a directory" 1>&2
# 	exit 10
# fi
# 
# PREF="_"
# if [ -r "$ENVDIR/$PREF$1" ] ;then
# 	cat "$ENVDIR/$PREF$1"
# else
# 	if [ -r $ENVDIR/$1 ] ;then
# 		cat $ENVDIR/$1
# 	fi
# fi

# #!/bin/sh
# # cxsetenv <varname> <value>
# 
# if [ $# = 0 ] ;then
# 	exec Env
# else
# # 	if [ $# = 1 -o $# -gt 2 ] ;then
# 	if [ $# = 1 ] ;then
# 		echo "usage: `basename $0` <variablename> <value>"
# 		echo "The variable is recorded in \$ENVDIR , ./.env or $HOME/.env"
# 		exit 1
# 	fi
# fi
# if [ "$ENVDIR" = "" ] ;then
# 	if [ -d ./.env ] ;then
# 		ENVDIR="./.env"
# 	else	
# 		if [ -d $HOME/.env ] ;then
# 			ENVDIR="$HOME/.env"
# 		else
# 			echo "No ENVDIR specified - creating ./.env"
# 			mkdir ./.env
# 			ENVDIR="./.env"
# 		fi
# 	fi
# fi
# 
# if [ ! -d "$ENVDIR" ] ;then
# 	echo "ENVDIR=$ENVDIR : not a directory"
# 	exit 10
# fi
# 
# # VAR=$ENVDIR/$1
# # shift
# while [ $# -gt 1 ] ;do
# 	/bin/echo >$ENVDIR/$1 "$2\c"
# 	shift 2
# done
