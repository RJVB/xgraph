# file with machine specific definitions for gccopt, etc.
# expected in ${DEVPREFSDIR}/wmachine or ${HOME}/.Preferences/.dev/wmachine
# source with the command name doing the sourcing as its first argument

case $1 in
	gccopt)

		case $HOST in
			moka)
				DEFAULT_COMPILER="/usr/bin/gcc"

				VOPTIMOPT="-O3 -f{s-r,nc-r,n-m,n-a,i-f,k-i-f,d-b}"
				OOPTIMOPT="-O3 -fstrength-reduce" #-fdelayed-branch"	# -mshared-libs"
# 970113:
# 	OOPTIMOPT="$OOPTIMOPT  -fexpensive-optimizations -frerun-cse-after-loop -fno-omit-frame-pointer -fno-schedule-insns -fschedule-insns2 -finline-functions"
# The options that get turned on by maximal optimisation (default):
				OOPTIMOPT="$OOPTIMOPT  -fexpensive-optimizations -frerun-cse-after-loop -fschedule-insns -fschedule-insns2 -finline-functions -funroll-loops"
# The options that are standard on, but get turned off by debugging, regardless of whether optimisation is turned on again:
				NODEBUGOPT="" #"-fomit-frame-pointer"
				OPTIMOPT="$OOPTIMOPT"
				DEBUGOPT="$NODEBUGOPT"
# Options to ensure that only "safe" optimisations are performed, e.g. not causing misalignement of variables, etc.
# On a PIII, this means never allowing -fcaller-saves, unless user overrides it again...
				SAFETYOPTS="-fno-caller-saves -fno-force-mem"

# do not use -mpowerpc-gpopt: runtime errors may result (on G3/G4 only?)
# same for -mpowerpc-gfxopt?
# 	MARCH="-mpowerpc -mcpu=power2 -maltivec -mabi=altivec -mhard-float -mpowerpc-gfxopt -mpowerpc-gpopt" # -force_cpusubtype_ALL"
				MARCH="-mpowerpc -mcpu=power4 -mtune=power4 -mpower2 -mhard-float -mpowerpc-gfxopt -mpowerpc-gpopt -mfused-madd -mnew-mnemonics -mstring -mmultiple -misel=yes " # -force_cpusubtype_ALL"
				RWSTRINGS=0
				;;

	*)
		echo "$0: PROBLEM: we should never be called with unknown argument >$1<"
		;;
esac
